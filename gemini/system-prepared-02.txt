Bob is playing a board game with an electronic device called an "oracle". 

There is a square board that consists of 36 cells, in 6 rows and 6 columns. Each cell is identified by its column number X  (0 < X < 7) and its row number Y (0 < Y < 7).  There are four buckets, located near the corners of the board as follows:
Bucket 0, at  X=0,Y=7;
Bucket 1, at  X=7,Y=7;
Bucket 2, at  X=7,Y=0;
Bucket 3, at  X=0,Y=0.

The game consists of many episodes. At the beginning of each episode, the oracle randomly places several objects on the board, no more than 1 object into each cell. Each object has a unique ID (an integer number), color  (one of "red", "blue", "black", "yellow") and shape ("square", "circle", "triangle", "star"). The position of an object on the board can be described by its coordinates: the column number X and the row number Y, both of which are integer numbers in the range 1 thru 6.

The content of the board can be described in JSON format, by listing the positions and the properties of the objects. For example:

{"value":[{"id": 0, "color":"YELLOW","shape":"TRIANGLE","x":5,"y":1},
{"id": 1, "color":"BLUE","shape":"SQUARE","x":2,"y":2},
{"id": 2, "color":"YELLOW","shape":"TRIANGLE","x":5,"y":2}]}

Some "hidden rules" (not known to Bob) are programmed into the oracle's circuitry, and determine which objects can be removed from the board, and into which buckets they can be placed. Bob, when playing the game, can make a "move attempt", that is try to pick a specific object from the board and to place that object into a specific bucket, by saying "MOVE id bucketId", e.g.
  MOVE 3 0
(meaning, "I want to move object 3 to bucket 0). The oracle will then respond in one of the 3 following ways:
 * If Bob's attempted move is one of those that the hidden rules allow at this point in the game, the oracle will respond with the word "ACCEPT", and removes the object from the board.
 * If the hidden rules don't allow moving the object to the bucket chosen by Bob, but allow moving that object to some other bucket or buckets, then the oracle will respond with the word "DENY", and the object will stay on the board. Bob will then know that it makes no sense to try moving this object to the same bucket again until the state of the board has changed.
 * If the hidden rules don't allow moving the object to any bucket, the oracle will respon with the word "IMMOVABLE", and the object will stay on the board. Bob will then know that it makes no sense to try moving this object again, to any bucket, until the state of the board has changed.

The episode ends when all objects have been removed from the board, i.e. "the board has been cleared". 

Bob and you don't know the hidden rules. However, we know that they may involve the objects' positions on the board (with respect to the coordinates X and Y, and/or with respect to other objects on the board), as well as the objects' shapes and colors.

The rules may also involve Bob's previous successful move (i.e., to which bucket the most recently succesfully removed object was placed).

The rules do NOT involve objects' IDs, or any previous unsuccessful move attempts. (That is, unsuccessful move attempts (those which did not result in an ACCEPT) do not affect the state of the board).

The rules are deterministic, and they don't change throughout the game; they are the same in all episodes.

Here are a few examples of hidden rule sets that the oracle can support. We describe these rule sets as consisting of sequentially executed rule lines. The oracle loops through the rules until the board is empty.

Example 1.

Line 1. Pick any object, and put it to a bucket corresponing to its color as follows: if it's red, put it to bucket 0; if it's black, to bucket 1; if it's blue, to bucket 2; if it's yellow to bucket 3. Then go back to line 1.

Example 2:

Line 1. If there is an object with Y=6, pick it and put it to bucket 0.
Line 2. If there is an object with Y=5, pick it and put it to bucket 1.
Line 3. If there is an object with Y=4, pick it and put it to bucket 2.
Line 4. If there is an object with Y=3, pick it and put it to bucket 3.
Line 5. If there is an object with Y=2, pick it and put it to bucket 0.
Line 6. If there is an object with Y=1, pick it and put it to bucket 1. Go back to line 1.

Example 3:

Line 1. If there are any red objects, pick them one by one, and put them to any buckets.
Line 2. If there are any black objects, pick them one by one, and put them to any buckets.
Line 3. If there are any yellow objects, pick them one by one, and put them to any buckets.
Line 4. If there are any blue objects, pick them one by one, and put them to any buckets.


Bob's goal in each episode is to "clear the board" (remove all the objects) in as few move attempts as possible. However, Bob seems to make his attempts more or less at random, and keeps making mistakes.

Can you help Bob, by analyzing his move attempts and their outcomes, and figuring what the hidden rules are?

I will describe Bob's move attempts in all episodes he has played in the following format
"MOVE id bucketId response",
where "id" is the ID of the object that you attempted to move, "bucketId" is the ID of the bucket into which you wanted to place it, and "response" is one of the following: ACCEPT, IMMOVABLE, DENY.

I will then ask you to provide your best idea of what the hidden rules are. Try to find a rule set that will explain the oracle response to all of Bob's move attempts, while keeping in mind that the rules probably are not overly complicated. Most likely they can be described by just a few lines of text or computer code, as in the above examples.

Finally, I will also describe to you several "future episodes", each one coming with an initial board with N objects, but no recorded moves. I will ask you to help Bob by proposing, for each board, a sequence of N move attempts that are most likely to successfully clear the board (i.e. such a sequence of move attempts that all of them be accepted). 



