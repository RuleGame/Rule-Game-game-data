::::::::::::::
allPaulsRules.txt
::::::::::::::
::::::::::::::
history_A.txt
::::::::::::::
# intended to be an easy history-based rule
# this means any bucket first and after that, counter-clockwise. 
# This is an example from Vladimir's discussion of the syntax 
# At: http://sapir.psych.wisc.edu:7150/w2020-dev/arithmetic.html 
(*,*,*,*, [!p*[0,1,2,3], !!p*(p+3)]) 
::::::::::::::
history_B.txt
::::::::::::::
# History_B: intended to be a moderate  history-based rule
# First row means any object at start, After, CCW
# Note the use  of * to combine a condition with a set 
# At: http://sapir.psych.wisc.edu:7150/w2020-dev/arithmetic.html  
(1,*,*,*, [!p*[0,1,2,3], !!p*(p+3)])
(2,*,*,*,[(p+2)])
::::::::::::::
history_C.txt
::::::::::::::
# History_C: intended to be a difficult history-based rule
# cycle is 4 objects so that it can be seen in a 9-item display
# Note the use  of * to combine a condition with a set 
# At: http://sapir.psych.wisc.edu:7150/w2020-dev/arithmetic.html  
(1,*,*,*,[Remotest])
(2,*,*,*,[(p+1)])
(1,*,*,*,[Nearby])


::::::::::::::
objects_A.txt
::::::::::::::
# Objects_A is intended to be an easy object based rule.
# It simply puts each shape to a bucket
# 
# 
(*,square,*,*,[0]) (*,circle,*,*,[1]) (*,triangle,*,*,[2]) (*,star,*,*,[3])


::::::::::::::
objects_B.txt
::::::::::::::
#  objects_B: intended to be a moderate diffculty object-based rule (like Stroop)
# Uses the 3.0 orientation and specifi object capability by named arrows
# requires the named arrow object set. Copied from vm directory on shapes.
# desirable to restrict to only one color for this. 
(*,"arrows/arrow-up-left",*,*,[1]) (*,"arrows/arrow-up-right",*,*,1) (*,"arrows/arrow-down-right",*,*,0) (*,"arrows/arrow-down-left",*,*,2) 





::::::::::::::
objects_C.txt
::::::::::::::
# object_C.txt is intended ot be a difficult object-based rule not depending very much on history. The ideas is to alternately make a move based on shape and one based on color. I am not sure about the difficulty for humans. Check the row counter syntax. 
1 (1,square,*,*,[0]) (1,triangle,*,*,[1]) (1,circle,*,*,[2]) (1,star,*,*,[3])
1 (1,*,red,*,[0]) (1,*,blue,*,[1]) (1,*,black,*,[2]) (1,*,yellow,*,[3])
::::::::::::::
objects_D.txt
::::::::::::::
# objects D is intendend to be difficult in a way that does not seem to depend on history. See also the syntax rules at: http://sapir.psych.wisc.edu:7150/w2020-dev/syntax.html
(*,*,red,*,[0,1])(*,*,yellow,*,[Nearby])(*,*,blue,*,[Remotest])(*,*,black,*,[3])
::::::::::::::
position_A.txt
::::::::::::::
# intended to be a very easy position rule
# Order L1 = reading order. 
(*,*,*,L1, Nearby)
::::::::::::::
position_B.txt
::::::::::::::
# intended to be a medium difficulty  position rule
# mixes up the orders in a not quite uniform way
# with unequal counts and no left-right symmetry
# players may learn a "right side rule" that covers the correct rule.
(2,*,*,T, Nearby)
(1,*,*,B, Nearby)
(1,*,*,R, Nearby)
::::::::::::::
position_C.txt
::::::::::::::
# intended to be very difficult position rule
# uses an order on the cells generated randomly using python
# so this can be learned, with high probability, in about 12 boards
# but with random boards it cannot be guaranteed to learn it. 
Order custom=[22,8,2,32,7,30,26,10,24,28,23,21,31,17,16,13,1,25,36,14,18,4,3,27,20,12,19,29,34,6,9,5,15,11,35,33]
(*,*,*,custom, Nearby)
